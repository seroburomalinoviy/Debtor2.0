from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext # –ø—Ä–æ–¥–∞–∫—à–Ω: redis
from aiogram.dispatcher.filters.state import State, StatesGroup

from app.logic.orm import User, Room
from app.utils.room import room_buttons

import logging

logger = logging.getLogger(__name__)


class Registration(StatesGroup):
    wait_room_name = State()
    wait_room_pass = State()
    wait_user_name = State()


async def start_creating(message: types.Message, state: FSMContext):
    await state.finish() # –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ãüö™", reply_markup=keyboard)
    await Registration.wait_room_name.set()


async def get_room_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    if len(message.text) < 30:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = Room(name=message.text)

        if not room.exist_room():
            await state.update_data(room=room) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –≤ –≤–∏–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
            await Registration.next()
            await message.answer(f"–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ãüö™")
        else:
            await message.answer(f"–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    else:
        await message.answer(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


async def get_room_pass(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    keyboard_room = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = room_buttons
    keyboard_room.add(*buttons)
    keyboard_room.add('–û—Ç–º–µ–Ω–∞')

    # –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ
    room_data = await state.get_data()
    room = room_data['room']
    room.password = message.text

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    user = User(str(message.from_user.id))
    user_exists = user.get_user()

    if not user_exists:
        del user
        await state.update_data(room=room)
        await Registration.next()
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è", reply_markup=keyboard)
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–¥ —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
        # –ò–º—è –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        room.owner = str(message.from_user.id)
        room.create()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
        room.add_user()  # –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É —é–∑–µ—Ä–∞
        user.current_room = room.name
        user.update() # –æ–±–Ω–æ–≤–æ–∏–ª–∏ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è



        logger.info(f"User {user.name} authorized and added in room {user.current_room}")
        await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É üö™ {user.current_room}!",
                             reply_markup=keyboard_room)
        await state.finish()


async def get_user_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = room_buttons
    keyboard.add(*buttons)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    # –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–Ω–∞—Ç–µ
    room_data = await state.get_data()
    room = room_data['room']
    room.create() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥

    # —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ –∫–æ–º–Ω–∞—Ç–µ
    user = User(tg_id=str(message.from_user.id), name=message.text, is_owner=True, current_room=room.name)
    user.create()
    logger.info(f"User {user.tg_id} created and added in room {user.current_room}")
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏ –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É üö™ {room.name}!", reply_markup=keyboard)
    await state.finish()


def register_handler_create_room(dp: Dispatcher):
    dp.register_message_handler(start_creating, commands="create_room", state="*")
    dp.register_message_handler(get_room_name, state=Registration.wait_room_name)
    dp.register_message_handler(get_room_pass, state=Registration.wait_room_pass)
    dp.register_message_handler(get_user_name, state=Registration.wait_user_name)
