from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext # –ø—Ä–æ–¥–∞–∫—à–Ω: redis
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from app.logic.orm import User, Room
from app.utils.room import room_buttons

import logging

logger = logging.getLogger(__name__)


# –û–±—ä—è–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ö–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ - —Ç–æ –µ—Å—Ç—å —Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —à–∞–≥–∏/—ç—Ç–∞–ø—ã, –ø–æ
# –∫–æ—Ç–æ—Ä—ã–º –º—ã –≤–µ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Registartation(StatesGroup):
    wait_room_name = State()
    wait_room_password = State()
    wait_user_name = State()


async def login_start(message: types.Message, state: FSMContext):
    # –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    await message.answer(f"""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã\nüö™ "..." """, reply_markup=keyboard)
    await Registartation.wait_room_name.set()


async def get_room_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if len(message.text) > 30:
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è, –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥ —Å–æ—Å—Ç
        keyboard.add('–û—Ç–º–µ–Ω–∞')
        await message.answer("[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥]", reply_markup=keyboard)
    else:
        room = Room(name=message.text)
        if room.exist_room():
            await state.update_data(room=room)
            await Registartation.next() # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            keyboard.add('–û—Ç–º–µ–Ω–∞')
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å\nüö™ ...", reply_markup=keyboard)
        else:
            keyboard.add("/create_room")
            keyboard.add("/login")
            keyboard.add('–û—Ç–º–µ–Ω–∞')
            await message.answer("–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É",
                                 reply_markup=keyboard)
            await state.finish()


# –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞–Ω–æ, —á—Ç–æ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞, —Ç–æ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è get_room_pass
async def get_room_pass(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    room_data = await state.get_data()
    room = room_data['room']
    room.password = message.text

    if room.auth():
        user = User(str(message.from_user.id))
        if user.get_user():
            user_list = room.get_userlist()
            if user.tg_id in user_list:
                user.current_room = room.name
                user.update()
            else:
                room.new_member = user.tg_id
                room.add_user()
                logger.info(f"User {user.tg_id} added in room {room.name}")
            keyboard.add(*room_buttons)
            await message.answer(f"üîÜ \n –í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É \nüö™ {room.name}", reply_markup=keyboard)
            await state.finish()
        else:
            keyboard.add('–û—Ç–º–µ–Ω–∞')
            await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=keyboard)
            await Registartation.wait_user_name.set()
    else:
        keyboard.add('–û—Ç–º–µ–Ω–∞')
        await message.answer(f"üí¢ \n –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑",
                             reply_markup=keyboard)
        await Registartation.wait_room_password.set()


async def get_user_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    room_data = await state.get_data()
    room = room_data['room']

    if len(message.text) > 30:
        keyboard.add('–û—Ç–º–µ–Ω–∞')
        await message.answer(f"üí¢ \n –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤–≤–æ–¥. \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑",
                             reply_markup=keyboard)
        await Registartation.wait_user_name.set()
    else:
        user = User(str(message.from_user.id))
        user.name = message.text
        user.current_room = room.name
        user.create()
        room.new_member = user.tg_id
        room.add_user()
        logger.info(f"User {user.tg_id} created")
        logger.info(f"User {user.tg_id} added in room {room.name}")

        keyboard.add(*room_buttons)
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {user.name}!")
        await message.answer(f"üîÜ \n –í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É \nüö™ {room.name}", reply_markup=keyboard)
        await state.finish()


def register_handler_login_room(dp: Dispatcher):
    dp.register_message_handler(login_start, Text(equals='–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É'), state="*")
    dp.register_message_handler(get_user_name, state=Registartation.wait_user_name)
    dp.register_message_handler(get_room_name,  state=Registartation.wait_room_name)
    dp.register_message_handler(get_room_pass, state=Registartation.wait_room_password)

