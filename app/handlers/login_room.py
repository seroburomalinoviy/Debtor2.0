from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext # –ø—Ä–æ–¥–∞–∫—à–Ω: redis
from aiogram.dispatcher.filters.state import State, StatesGroup

from app.logic.orm import User, Room

import logging

logger = logging.getLogger(__name__)


# –û–±—ä—è–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ö–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ - —Ç–æ –µ—Å—Ç—å —Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —à–∞–≥–∏/—ç—Ç–∞–ø—ã, –ø–æ
# –∫–æ—Ç–æ—Ä—ã–º –º—ã –≤–µ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Registartation(StatesGroup):
    wait_user_name = State()
    wait_room_name = State()
    wait_room_password = State()


async def login_start(message: types.Message, state: FSMContext):
    # –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    user = User(str(message.from_user.id))
    user_exists = user.get_user()
    if not user_exists:
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.", reply_markup=keyboard)
        await Registartation.wait_user_name.set()
    else:
        await message.answer(f"[–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ãüö™]", reply_markup=keyboard)
        await Registartation.wait_room_name.set()


async def get_user_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    user = User(str(message.from_user.id))
    user.name = message.text
    user.create()

    logger.info(f"User {user.name} created")
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    await message.answer(f"[–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ãüö™]", reply_markup=keyboard)
    await Registartation.wait_room_name.set()


# –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞–Ω–æ, —á—Ç–æ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞, —Ç–æ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è get_room_num
async def get_room_name(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    if len(message.text) < 30:
        room = Room(name=message.text)
        await state.update_data(room=room)
        await Registartation.next() # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        await message.answer("[–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å]", reply_markup=keyboard)
    else:
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è, –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–ª–µ–¥ —Å–æ—Å—Ç
        await message.answer("[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥]", reply_markup=keyboard)


# –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞–Ω–æ, —á—Ç–æ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞, —Ç–æ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è get_room_pass
async def get_room_pass(message: types.Message, state: FSMContext):
    keyboard_room = types.ReplyKeyboardMarkup(resize_keyboard=True)
    room_buttons = ['–ú–æ–∏ –¥–æ–ª–≥–∏', '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ']
    keyboard_room.add(*room_buttons)
    keyboard_room.add('–û—Ç–º–µ–Ω–∞')

    room_data = await state.get_data()
    room = room_data['room']
    room.password = message.text

    if room.auth():
        user = User(str(message.from_user.id))
        user.get_user()
        user.room_name = room.name
        user.is_owner = False
        user.update()

        await message.answer(f"üîÜ \n –í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É üö™ {room.name}", reply_markup=keyboard_room)
        await state.finish()
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("/login")
        keyboard.add('–û—Ç–º–µ–Ω–∞')
        await message.answer(f"üí¢ \n –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                             reply_markup=keyboard)
        await state.finish()


def register_handler_login_room(dp: Dispatcher):
    dp.register_message_handler(login_start, commands="login", state="*")
    dp.register_message_handler(get_user_name, state=Registartation.wait_user_name)
    dp.register_message_handler(get_room_name,  state=Registartation.wait_room_name)
    dp.register_message_handler(get_room_pass, state=Registartation.wait_room_password)

