import asyncio

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext # –ø—Ä–æ–¥–∞–∫—à–Ω: redis
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import Bot

from app.logic.orm import User, Package
from app.utils.room import general_buttons, myoperations_buttons, myoperations_reference, myoperations_keyboard

import logging
import random

logger = logging.getLogger(__name__)


async def start_get_debts(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(myoperations_reference, reply_markup=myoperations_keyboard)


async def package_products(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    inline_keyboard = types.InlineKeyboardMarkup()

    user = User(str(message.from_user.id))
    user.get_user()
    package = Package(user.tg_id, user.current_room, paid=False)
    list_of_products = package.get_products_list()
    emoji = ['üî¥','üü†','üü°','üü¢','üîµ','üü£','‚ö´Ô∏è','‚ö™Ô∏è','üü§', 'üü•', 'üüß','üü®','‚¨õÔ∏è','üü™','‚¨úÔ∏è','üî∑','üü¶','üî∂','üü©']

    if not list_of_products:
        await message.answer(f"–î–æ–ª–≥–æ–≤ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏! üîÜ")
        await message.answer(f"üõí")
    else:
        for id, debt, cost, date, paid, room, user_name, payer_name, product_name in list_of_products:

            current_emoji = random.choice(emoji)
            if product_name is None:
                product_name='Empty'

            inl_but = types.InlineKeyboardButton(text='–û—Ç–º–µ—Ç–∏—Ç—å', callback_data=f"check_{id}_{current_emoji}")
            inline_keyboard.add(inl_but)

            await message.answer(f"–ü–æ–∫—É–ø–∫–∞ {current_emoji} "
                             f"–≤ –∫–æ–º–Ω–∞—Ç–µ {room}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product_name}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {date}\n–í—ã –¥–æ–ª–∂–Ω—ã: "
                             f"{round(debt, 2)} —Ä—É–±\n–û–±—â–∞—è "
                             f"—Å—Ç–æ–∏–º–æ—Å—Ç—å: "
                             f"{cost} —Ä—É–±\n–ü–ª–∞—Ç–∏–ª: {payer_name}",
                                 reply_markup=inline_keyboard)

            inline_keyboard['inline_keyboard'][-1].pop()


async def check_product(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete_reply_markup()
    transaction_id = call.data.split("_")[1]
    emoji = call.data.split("_")[2]
    answer_succses = call.message.text + f"\n–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫—É {emoji} ‚úîÔ∏è"
    answer_repeat = call.message.text + f"\n–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —ç—Ç—É –ø–æ–∫—É–ø–∫—É ‚úîÔ∏è"

    product = Package(transaction_id=transaction_id)
    product_params = product.get_product()
    paid = product_params[6]
    if paid:
        await call.message.edit_text(answer_repeat)
    else:
        product.check_debt()
        await call.message.edit_text(answer_succses)

        await asyncio.sleep(2)
        try:
            await send_accept_message(call.message.bot, transaction_id)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏", exc_info=e)


async def send_accept_message(bot: Bot, transaction_id):
    product = Package(transaction_id=transaction_id)
    product.check_debt()
    product_params = product.get_product()

    date = product_params[0]
    description = product_params[1]
    debt = product_params[2]
    payer_tg_id = product_params[3]
    debtor_name = product_params[4]

    if product_params[1] is None:
        description = 'Empty'

    inline_keyboard = types.InlineKeyboardMarkup()
    inl_but = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"accept_{transaction_id}")
    inline_keyboard.add(inl_but)

    await bot.send_message(chat_id=payer_tg_id, text=f"{debtor_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–ª–∞—Ç–µ–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ {round(debt,2)} –∑–∞ –ø–æ–∫—É–ø–∫—É "
                                        f"{description} —Å–¥–µ–ª–∞–Ω–Ω—É—é {date}.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞?", reply_markup=inline_keyboard)


async def payer_accepted_payment(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete_reply_markup()
    transaction_id = call.data.split("_")[1]

    product = Package(transaction_id=transaction_id)
    product.accept_payment()

    answer = call.message.text.replace('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞?','–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚òëÔ∏è')

    await call.message.edit_text(answer)

    await asyncio.sleep(1)

    product_params = product.get_product()

    date = product_params[0]
    description = product_params[1]
    debt = product_params[2]
    debtor_tg_id = product_params[5]

    await call.message.bot.send_message(chat_id=debtor_tg_id, text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ {description} –æ—Ç {date} –≤ —Ä–∞–∑–º–µ—Ä–µ"
                                                                   f" {round(debt,2)} "
                                                                   f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ")


def register_handlers_get_debts(dp: Dispatcher):
    dp.register_message_handler(start_get_debts, Text(equals=general_buttons[0], ignore_case=False), state='*')
    dp.register_message_handler(package_products, Text(equals=myoperations_buttons[0], ignore_case=False), state='*')
    dp.register_callback_query_handler(check_product, Text(startswith='check_'), state="*")
    dp.register_callback_query_handler(payer_accepted_payment, Text(startswith='accept_'),state="*")
