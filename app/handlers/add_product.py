from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext # –ø—Ä–æ–¥–∞–∫—à–Ω: redis
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from app.logic.orm import User, Package
from app.utils.room import room_buttons

import logging
import datetime

logger = logging.getLogger(__name__)


class Registration(StatesGroup):
    wait_cost = State()
    wait_description = State()
    wait_date = State()


async def take_package(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    user = User(str(message.from_user.id))
    user.get_user()
    product = Package(str(message.from_user.id))
    await state.update_data(product=product)
    await state.update_data(cur_user=user)
    await message.answer(f"–ú—ã –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∫–æ–º–Ω–∞—Ç—É üö™ {user.current_room}")
    await message.answer(f"–î–æ—Å—Ç–∞—é —Ä—É—á–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é... \n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard)
    await Registration.wait_cost.set()


async def get_cost(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product = data['product']
    user = data['cur_user']
    logger.info(f"user id: {user.tg_id}")
    logger.info(f"product payer: {product.payer}")
    try:
        product.cost = int(message.text)
        await state.update_data(product=product)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(f"–û–ø–ª–∞—Ç–∏–ª(–∞) {user.name}")
        keyboard.add("–ü—Ä–æ–¥—É–∫—Ç—ã")
        keyboard.add("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
        keyboard.add("–î–ª—è –¥–æ–º–∞")
        keyboard.add('–û—Ç–º–µ–Ω–∞')

        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä,—á—Ç–æ –ø–æ–∫—É–ø–∫—É –æ–ø–ª–∞—Ç–∏–ª–∏ –í—ã \n–ò–ª–∏ "
                             f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ",
                             reply_markup=keyboard)
        await Registration.next()

    except ValueError:
        await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã")


async def get_description(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–°–µ–≥–æ–¥–Ω—è')
    keyboard.add('–û—Ç–º–µ–Ω–∞')

    data = await state.get_data()
    product = data['product']

    product.description = message.text
    await state.update_data(product=product)

    await message.answer(f"–í–±–µ–π—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01012001) \n –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ",
                         reply_markup=keyboard)
    await Registration.next()


async def get_date(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    data = await state.get_data()
    product = data['product']
    user = data['cur_user']

    if message.text == '–°–µ–≥–æ–¥–Ω—è':
        logger.info(f"product: {product.cost}")
        keyboard.add(*room_buttons)
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost}—Ä\n–î–∞—Ç–∞:"
                             f" {product.date}\n–û–ø–ª–∞—Ç–∏–ª–∏: –í—ã\n–ü–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ üö™ {user.current_room}")
        await message.answer(f"–ó–∞–ø–∏—Å–∞–ª!", reply_markup=keyboard)
        await state.finish()

    else:
        if datetime.datetime.strptime(message.text, "%d%m%Y") <= datetime.datetime.today():
            product.date = datetime.datetime.strptime(message.text, "%d%m%Y").strftime("%d.%m.%y")
            keyboard.add(*room_buttons)
            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost}—Ä\n–î–∞—Ç–∞:"
                                 f" {product.date}\n–û–ø–ª–∞—Ç–∏–ª–∏: –í—ã")
            await message.answer(f"–ó–∞–ø–∏—Å–∞–ª!", reply_markup=keyboard)
            await state.finish()
        else:
            keyboard.add('–û—Ç–º–µ–Ω–∞')
            await message.answer(f"–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ?")
            await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", reply_markup=keyboard)
            await Registration.wait_date.set()


def register_handlers_add_product(dp: Dispatcher):
    dp.register_message_handler(take_package, Text(equals="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É", ignore_case=False), state="*")
    dp.register_message_handler(get_cost,  state=Registration.wait_cost)
    dp.register_message_handler(get_description, state=Registration.wait_description)
    dp.register_message_handler(get_date,  state=Registration.wait_date)


